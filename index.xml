<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leckyyyyyyy.info</title>
    <link>http://leckyyyyyyy.github.io/</link>
    <description>Recent content on leckyyyyyyy.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 23 Jun 2015 02:14:46 +0900</lastBuildDate>
    <atom:link href="http://leckyyyyyyy.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CentOS5 で JDK6 から JDK7 へのアップデート</title>
      <link>http://leckyyyyyyy.github.io/post/2015/centos-jdk6-to-jdk7-update/</link>
      <pubDate>Tue, 23 Jun 2015 02:14:46 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/centos-jdk6-to-jdk7-update/</guid>
      <description>&lt;p&gt;CentOS5 環境の JDK6 を JDK7 にアップデートするときの手順です。&lt;/p&gt;

&lt;p&gt;今回の JDK のアップデートでは一度パッケージをアンインストールしてから目的のパッケージをインストールするため、アンインストール時に &lt;strong&gt;依存しているパッケージもアンインストール&lt;/strong&gt; されます。&lt;br /&gt;
依存しているパッケージはアンインストール時に &lt;strong&gt;Removing for dependencies&lt;/strong&gt; として表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# JDK6 をアンインストール
sudo yum remove java

# JDK7 をインストール
sudo yum install java-1.7.0-openjdk

# Java のバージョンを表示
java -version

# アンインストールしたパッケージが必要な場合は再インストール
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/var/log/yum.log&lt;/code&gt; でパッケージの追加/削除/更新の確認ができるので、ログから依存していたパッケージを探せます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitLab で issue や MargeRequest の新規作成時にガイドラインを表示するには</title>
      <link>http://leckyyyyyyy.github.io/post/2015/gitlab-contributing-link/</link>
      <pubDate>Sat, 20 Jun 2015 20:14:59 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/gitlab-contributing-link/</guid>
      <description>&lt;p&gt;issue や MargeRequest を作成するとき、ルールやフォーマットなどガイドラインがあるプロジェクトではメンバーとして参加するとき説明をうけたり、別途ドキュメントとかをもらったりするかもしれませんが、作成するときには、そのガイドラインに沿っていなかったり忘れたりするときもあると思います。&lt;/p&gt;

&lt;p&gt;そのようなことを防ぐため？に GitHub や GitLab にはガイドライン用のファイルを指定のファイル名で作成することで、issue や MargeRequest を新規作成するときにリンクとして表示してくれます。&lt;/p&gt;

&lt;p&gt;GitHub でのガイドラインのリンクを表示する方法は &lt;a href=&#34;https://github.com/blog/1184-contributing-guidelines&#34;&gt;ヘルプページ&lt;/a&gt; にあります。&lt;br /&gt;
GitLab では &lt;a href=&#34;https://about.gitlab.com/2014/03/21/gitlab-6-dot-7-released/&#34;&gt;リリースノート&lt;/a&gt; に機能の説明は載っていたのですが、手順については今回調べることになったのでまとめました。&lt;/p&gt;

&lt;p&gt;リポジトリのルートディレクトリ直下にファイル名 &lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt; または &lt;strong&gt;CONTRIBUTING&lt;/strong&gt; で作成。&lt;br /&gt;
&lt;small&gt;CONTRIBUTING.md と CONTRIBUTING の両方が存在したときは CONTRIBUTING が優先されるようです。&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Markdown 形式のほうがファイル単体で表示するときにも見やすいので、作成するときには CONTRIBUTING.md が良さそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins で HTTP 503 が表示されたときの解決方法</title>
      <link>http://leckyyyyyyy.github.io/post/2015/jenkins-proxy-error-503/</link>
      <pubDate>Fri, 19 Jun 2015 22:09:10 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/jenkins-proxy-error-503/</guid>
      <description>&lt;p&gt;Jenkins にアクセスしたときに HTTP ステータスコード 503 が表示されたときに&lt;br /&gt;
行った解決方法です。&lt;br /&gt;
Jenkins は Apache のリバースプロキシーで運用しています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Jenkins のステータスを確認
sudo /sbin/service jenkins status
# Jenkins 再起動
sudo /sbin/service jenkins restart
# リバースプロキシで運用しているので、Apache 再起動
sudo /sbin/service httpd graceful
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Google でのテストに関する実行時間とテストの内容について</title>
      <link>http://leckyyyyyyy.github.io/post/2015/google-test-size/</link>
      <pubDate>Thu, 18 Jun 2015 00:22:11 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/google-test-size/</guid>
      <description>&lt;p&gt;約5年前に投稿された内容ですが、テストの内容と実行時間からテストサイズの目安を一覧にしたページを見つけました。&lt;br /&gt;
&lt;a href=&#34;http://googletesting.blogspot.jp/2010/12/test-sizes.html&#34;&gt;http://googletesting.blogspot.jp/2010/12/test-sizes.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Android に @SmallTest, @MediumTest, @LargeTest のアノテーションがあるのですが、&lt;br /&gt;
今までピンと来ずテストサイズの目安も何か参考になるのも見つけられなかったので、&lt;br /&gt;
利用していませんでした。&lt;br /&gt;
でも、この一覧があれば今後はこのアノテーションを有効活用できそうな気がします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android のアノテーションを利用するときの基準&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@SmallTest&lt;br /&gt;
ファイルやデータベースにアクセスしないテスト&lt;/li&gt;
&lt;li&gt;@MediumTest&lt;br /&gt;
ファイルやデータベースにアクセスするテスト&lt;/li&gt;
&lt;li&gt;@LargeTest&lt;br /&gt;
UI テスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今後、利用するときがあったらこんな感じで使ってみたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown でダイアグラム、フローチャートを作成できる JavaScriptライブラリ mermaid を使ってみた</title>
      <link>http://leckyyyyyyy.github.io/post/2015/chart-library-mermaid/</link>
      <pubDate>Tue, 09 Jun 2015 01:46:12 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/chart-library-mermaid/</guid>
      <description>

&lt;script type=&#34;text/javascript&#34; src=&#34;https://rawgit.com/knsv/mermaid/0.4.0/dist/mermaid.full.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;https://rawgit.com/knsv/mermaid/gh-pages/css/mermaid.css&#34;&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
mermaid.ganttConfig = {
  numberSectionStyles: 2
}
&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/uzuki_aoba/items/a01f8b0b52ced69c8092&#34;&gt;mermaid.jsが素晴らしいけどなかなか使ってる人見かけないので実例晒す&lt;/a&gt; を見て&lt;br /&gt;
JavaScriptライブラリをインポートして早速チャートを mermaid で作成したときの内容です。&lt;/p&gt;

&lt;h4 id=&#34;チャートを書く前に:939c930df2c84c1f866f3ac37bf04b68&#34;&gt;チャートを書く前に&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://rawgit.com/knsv/mermaid/0.4.0/dist/mermaid.full.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;https://rawgit.com/knsv/mermaid/gh-pages/css/mermaid.css&amp;quot;&amp;gt;&lt;/code&gt;&lt;br /&gt;
または上記2つのファイルをダウンロードしてリンク先に設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
mermaid.ganttConfig = {
  // 1～ の場合はガントチャートで色分けされる。0 の場合はモノクロ。
  numberSectionStyles: 2
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加&lt;/p&gt;

&lt;h4 id=&#34;チャートを書く:939c930df2c84c1f866f3ac37bf04b68&#34;&gt;チャートを書く&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;gt;
// ここにチャートの定義を書くことで、この部分にチャートが描画されます。
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;チャートのデモ:939c930df2c84c1f866f3ac37bf04b68&#34;&gt;チャートのデモ&lt;/h4&gt;

&lt;p&gt;フローチャート&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;gt;
graph LR
  画面1 --&amp;gt; 画面2
  画面2 --&amp;gt; 画面3
  画面1 --&amp;gt; 画面4
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;mermaid&#34;&gt;
graph LR
  画面1 --&gt; 画面2
  画面2 --&gt; 画面3
  画面1 --&gt; 画面4
&lt;/div&gt;

&lt;p&gt;ガントチャート&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;mermaid&amp;quot;&amp;gt;
gantt
  title Webサイト作業スケジュール
  
  section 画面1
  デザイン       :a1, 2015-06-09, 10d
  プログラム開発 :a2, after a1, 10d
  テスト         :a3, after a2, 5d
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;mermaid&#34;&gt;
gantt
  title Webサイト作業スケジュール
  
  section 画面1
  デザイン       :a1, 2015-06-09, 10d
  プログラム開発 :a2, after a1, 10d
  テスト         :a3, after a2, 5d
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/knsv/mermaid&#34;&gt;mermaid&lt;/a&gt; の &lt;a href=&#34;http://knsv.github.io/mermaid/usage.html&#34;&gt;セットアップ方法&lt;/a&gt; やチャート作成に必要な定義、&lt;a href=&#34;http://knsv.github.io/mermaid/demos.html&#34;&gt;デモ&lt;/a&gt; も見ながら書いてみました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;チャートの定義が間違っていると描画する部分には何も表示されません&lt;/strong&gt; 表示されないときはブラウザのコンソールにエラーが表示されるので手助けになるかもしれないです。&lt;/p&gt;

&lt;p&gt;日本語を含めても表示されていました。&lt;br /&gt;
チャートのスタイルは CSS で変更できるので、必要に応じて変更できますね。&lt;br /&gt;
(今回、読み込んでいるのは mermaid のドキュメントを利用しています。デフォルトのスタイルが見つけられなかった。)&lt;/p&gt;

&lt;p&gt;Chrome ではフローチャート、ガントチャートどちらも表示されていますが、他のブラウザでは日本語が表示されなかったり、チャート自体が表示されないようです。&lt;br /&gt;
パスの矢印が Chrome, Firefox で表示されていないのですが、他のページで試したところ表示はされていたので、スタイルが要因かもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フローチャート

&lt;ul&gt;
&lt;li&gt;IE11&lt;br /&gt;
日本語が表示されない&lt;/li&gt;
&lt;li&gt;Chrome, Firefox&lt;br /&gt;
パスの矢印が表示されない?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ガントチャート

&lt;ul&gt;
&lt;li&gt;Firefox&lt;br /&gt;
チャートが表示されず、定義した内容が表示される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GitHub のコンテンツをリンクで読み込めるようにする</title>
      <link>http://leckyyyyyyy.github.io/post/2015/read-github-contents/</link>
      <pubDate>Sun, 07 Jun 2015 00:53:59 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/read-github-contents/</guid>
      <description>&lt;p&gt;GitHub で公開されている JavaScript ライブラリや CSSファイルを利用したいとき&lt;br /&gt;
zip ダウンロードして必要なファイルを抜き出す。GitHub で Raw モードで開いて保存。&lt;br /&gt;
ということをしておりましたが、これだとファイルを手元に置いておく必要があるので&lt;br /&gt;
試用するときにファイルとして置くのは避けたいなと感じていました。&lt;/p&gt;

&lt;p&gt;GitHub で Raw モードで開いたときの URL を読み込み先のリンクに利用できるカナと&lt;br /&gt;
思ったのですが、Content-Type が &lt;code&gt;text/plain&lt;/code&gt; で返ってくるのでブラウザに解釈して&lt;br /&gt;
もらうには都合が悪いです。&lt;/p&gt;

&lt;p&gt;その辺りも含めてお助けしてくれるサービス &lt;a href=&#34;https://rawgit.com/&#34;&gt;RawGit&lt;/a&gt; を知りました。&lt;/p&gt;

&lt;p&gt;使い方は&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;読み込むファイルを Raw モードで開き、URL をコピー&lt;/li&gt;
&lt;li&gt;コピーした URL を &lt;a href=&#34;https://rawgit.com/&#34;&gt;RawGit&lt;/a&gt; の &lt;code&gt;Paste a GitHub file or gist URL here.&lt;/code&gt; に貼り付け&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use this URL for dev/testing&lt;/strong&gt; のテキストボックスに URL が現れるのでコピー&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;コピーした URL を読み込み先の URL として設定するだけ。&lt;/p&gt;

&lt;p&gt;開発やテストなど小さな規模での利用用途なら良さそうです。&lt;br /&gt;
&lt;a href=&#34;https://rawgit.com/faq&#34;&gt;FAQ&lt;/a&gt; に用途に関することも載っていました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CheckStyle-IDEA 4.15.0 は JDK8 が必要みたい</title>
      <link>http://leckyyyyyyy.github.io/post/2015/checkstyle-idea-4.15.0-jdk8/</link>
      <pubDate>Tue, 02 Jun 2015 22:49:58 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/checkstyle-idea-4.15.0-jdk8/</guid>
      <description>&lt;p&gt;CheckStyle-IDEA のアップデート通知があったのでプラグインのアップデートを行うと&lt;br /&gt;
&lt;code&gt;Unsupported major.minor version 52.0&lt;/code&gt; のエラーが表示されました。&lt;/p&gt;

&lt;p&gt;GitHub で公開されているので &lt;a href=&#34;https://github.com/jshiell/checkstyle-idea/blob/4.15.0/README.md#i-see-a-cannot-load-project-error-stating-unsupported-majorminor-version-520&#34;&gt;README&lt;/a&gt; を確認するとエラーメッセージの対応方法が載っていました。&lt;br /&gt;
どうやらバージョンアップの影響で JDK8 にアップデートする必要があるとのことです。&lt;/p&gt;

&lt;p&gt;このままでは IDE の起動が失敗するので、JDK8 にアップデートするか、&lt;br /&gt;
プラグインの一覧から &lt;code&gt;CheckStyle-IDEA&lt;/code&gt; を選択してプラグインの実行を無効にする必要があります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Product Flavor で利用できない名前</title>
      <link>http://leckyyyyyyy.github.io/post/2015/android-product-flavor-unavailable-name/</link>
      <pubDate>Sat, 30 May 2015 16:19:48 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/android-product-flavor-unavailable-name/</guid>
      <description>&lt;p&gt;Product Flavor の名前に BuildType で定義している名前は利用できない。&lt;br /&gt;
&lt;code&gt;ProductFlavor names cannot collide with BuildType names&lt;/code&gt; のエラーが出る。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;release&lt;/code&gt; はデフォルトで定義されているので気付いたけど、&lt;br /&gt;
&lt;code&gt;debug&lt;/code&gt; を定義してみると同じエラーが出たので、予約されているようです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>yum でインストール済みのパッケージを確認する</title>
      <link>http://leckyyyyyyy.github.io/post/2015/confirm-installed-package-yum/</link>
      <pubDate>Thu, 28 May 2015 00:34:08 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/confirm-installed-package-yum/</guid>
      <description>&lt;p&gt;&lt;code&gt;yum list installed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;検索文字列を指定することで条件に一致するパッケージを表示する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# パッケージ名の先頭が java と一致するもの(前方一致)
yum list installed &amp;quot;java*&amp;quot;

# パッケージ名の末尾が java と一致するもの(後方一致)
yum list installed &amp;quot;*java&amp;quot;

# パッケージ名に java が含まれるもの(部分一致)
yum list installed &amp;quot;*java*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Apache ログでのURLフラグメント(#)の扱い</title>
      <link>http://leckyyyyyyy.github.io/post/2015/apache-log-fragment/</link>
      <pubDate>Sun, 10 May 2015 23:12:33 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/apache-log-fragment/</guid>
      <description>&lt;p&gt;URLフラグメント(#)以降の文字列はログには出力されない。&lt;br /&gt;
URLフラグメント以降の文字列も意味のあるログ情報として扱いたい場合は&lt;br /&gt;
自前でログ管理を作成するかなど対策が必要になる。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>