<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on leckyyyyyyy.info</title>
    <link>http://leckyyyyyyy.github.io/tags/android/</link>
    <description>Recent content in Android on leckyyyyyyy.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 09 Jul 2015 23:25:36 +0900</lastBuildDate>
    <atom:link href="http://leckyyyyyyy.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>UiAutomation#executeShellCommand は 5.0 から利用可能なメソッドだった</title>
      <link>http://leckyyyyyyy.github.io/post/2015/android-executeshellcommand/</link>
      <pubDate>Thu, 09 Jul 2015 23:25:36 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/android-executeshellcommand/</guid>
      <description>&lt;p&gt;UI Automator(コード上) で &lt;code&gt;adb shell&lt;/code&gt; を利用したいとき、ちょうど良いメソッド &lt;code&gt;UiAutomation#executeShellCommand&lt;/code&gt; を見つけたのですが、利用できるのは &lt;strong&gt;API level 21&lt;/strong&gt; からでした。&lt;br /&gt;
ビルドしようにもメソッドが存在しない旨のメッセージが表示されてエラーになって困っていましたが、落ち着いて確認するとターゲットにしているバージョンが違っていました。&lt;br /&gt;
入力補完のメソッド一覧に表示されたけど利用できなかったのですね。失敗した。&lt;/p&gt;

&lt;p&gt;調べている最中に見つけた URL 忘れるともったいないので&lt;br /&gt;
&lt;a href=&#34;https://developer.android.com/intl/ja/about/versions/android-5.0.html#TestingA11y&#34;&gt;Android 5.0 API の紹介(テストとユーザー補助)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://developer.android.com/intl/ja/reference/android/app/UiAutomation.html#executeShellCommand(java.lang.String)&#34;&gt;リファレンス UiAutomation#executeShellCommand(java.lang.String)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://developer.android.com/intl/ja/sdk/api_diff/21/changes.html&#34;&gt;Android API Differences Report&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API の紹介や API の相違点のページにも今回欲しかった情報がありました。調べるときにネットでよく彷徨い続けることがあるので、気をつけないと。&lt;br /&gt;
迷わないようにまずは公式から探します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android UI Automator の始め方</title>
      <link>http://leckyyyyyyy.github.io/post/2015/android-uiautomator-get-started/</link>
      <pubDate>Sat, 04 Jul 2015 22:30:00 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/android-uiautomator-get-started/</guid>
      <description>

&lt;p&gt;UI Automator は Android 標準の UI テストツールです。&lt;br /&gt;
UI テストは主にボタンをタップしたり、文字を入力するなどの操作をして特定のメッセージが表示される / 指定の画面が表示されるなど期待した結果になっているか確認することです。&lt;br /&gt;
ボタンをタップする、文字を入力するなどの操作部分をコードとして記述できるよう UI Automator がサポートしてくれます。&lt;/p&gt;

&lt;p&gt;テキストボックスに文字を入力してボタンを押すと次の画面を表示する、エラーメッセージを表示するなど決まった動作を確認 / テストする場合は導入しやすくコードとして記述しやすいです。&lt;br /&gt;
一度コードにしたものは「実行」するだけで同じ操作を繰り返し行ってくれるので、アプリケーションコードに変更を加えたタイミングで「実行」するなど定期的に行うことで何か間違いがあっても気付きやすくなると思います。&lt;br /&gt;
単調な操作を手動で複数回行うことはツライものがありますし、アプリケーションによっては操作するパターンが何十ともあると時間的にも精神的にもツラくなります。&lt;/p&gt;

&lt;p&gt;UI に関する操作でもスクロールが遅い / 速いやボタンをタップしたときのエフェクトなど直感的な内容に影響する部分はコードとして記述したり確認することは難しいため、手動で対応するしたほうが良い場合もあります。&lt;/p&gt;

&lt;p&gt;コードに置き換えが可能な部分は置き換えて、手動で行う必要がある部分に時間を割けるようにすることで、開発がより良くなると思います。&lt;/p&gt;

&lt;h3 id=&#34;実行環境:4a5216fdfeb236857092d744b1841597&#34;&gt;実行環境&lt;/h3&gt;

&lt;p&gt;UI Automator は 4.3 (API level 18) 以上のデバイスのみで利用できます。&lt;/p&gt;

&lt;h3 id=&#34;導入方法:4a5216fdfeb236857092d744b1841597&#34;&gt;導入方法&lt;/h3&gt;

&lt;p&gt;UI Automator を導入するには Gradle で定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
  defaultConfig {
    testInstrumentationRunner &amp;quot;android.support.test.runner.AndroidJUnitRunner&amp;quot;
  }
}

dependencies {
  androidTestCompile &#39;com.android.support.test:runner:0.3&#39;
  androidTestCompile &#39;com.android.support.test:rules:0.3&#39;
  androidTestCompile &#39;com.android.support.test.uiautomator:uiautomator-v18:2.1.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Android Studio から実行するときは &lt;strong&gt;Edit Configurations&amp;hellip;&lt;/strong&gt; から &lt;strong&gt;Android Tests&lt;/strong&gt; を選択し &lt;strong&gt;+&lt;/strong&gt; を押して追加後「Name:」に任意の名前を入力「Module:」に app を選択して作成します。&lt;br /&gt;
メニューの &lt;strong&gt;Select Run/Debug Configuration&lt;/strong&gt; で作成した Android Tests を選択し「実行」します。&lt;/p&gt;

&lt;p&gt;コンソールから実行するときは &lt;code&gt;./gradlew connectedCheck&lt;/code&gt; を実行します。&lt;br /&gt;
&lt;code&gt;[プロジェクト]/app/build/reports&lt;/code&gt; 下にレポートも作成されます。&lt;br /&gt;
&lt;small&gt;gradlew で実行できるのは UI Automator バージョン 2 からです&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&#34;サンプルコード:4a5216fdfeb236857092d744b1841597&#34;&gt;サンプルコード&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.example.android.testing;

import android.content.Context;
import android.content.Intent;
import android.support.test.InstrumentationRegistry;
import android.support.test.filters.SdkSuppress;
import android.support.test.runner.AndroidJUnit4;
import android.support.test.uiautomator.By;
import android.support.test.uiautomator.UiDevice;
import android.support.test.uiautomator.UiObject2;
import android.support.test.uiautomator.Until;
import android.support.v7.widget.LinearLayoutCompat;
import android.test.suitebuilder.annotation.LargeTest;

import org.hamcrest.CoreMatchers;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
@SdkSuppress(minSdkVersion = 18)
@LargeTest
public class UIAutomatorTest {

    private static final String APP_PACKAGE = &amp;quot;com.example.android.testing&amp;quot;;

    private static final int LAUNCH_TIMEOUT = 5000;

    private static final int UI_TIMEOUT = 5000;

    private UiDevice device;

    /**
     * アプリケーション起動に必要なIntentを作成
     *
     * @param context     {@link InstrumentationRegistry#getContext()} テスト実行のアプリケーション
     * @param packageName アプリケーションのパッケージ名
     * @return アプリケーション起動用Intent
     */
    public static Intent createLaunchIntent(Context context, String packageName) {
        final Intent intent = context.getPackageManager()
                .getLaunchIntentForPackage(packageName);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);

        return intent;
    }

    @Before
    public void setUp() {
        device = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());

        device.pressHome();

        Context testContext = InstrumentationRegistry.getContext();
        final Intent intent = createLaunchIntent(testContext, APP_PACKAGE);
        testContext.startActivity(intent);

        device.wait(Until.hasObject(By.pkg(APP_PACKAGE).depth(0)), LAUNCH_TIMEOUT);
    }

    @Test
    public void 前提条件() {
        Assert.assertThat(device, CoreMatchers.is(CoreMatchers.notNullValue()));
    }

    @Test
    public void Hello_worldが表示されること() {
        UiObject2 textView
                = device.wait(Until.findObject(By.text(&amp;quot;Hello world!&amp;quot;)), UI_TIMEOUT);

        Assert.assertThat(textView.getText(), CoreMatchers.is(&amp;quot;Hello world!&amp;quot;));
    }

    @Test
    public void Action_overflowを押してSettingsが表示されること() {
        UiObject2 actionOverflow
                = device.wait(Until.findObject(By.clazz(LinearLayoutCompat.class)), UI_TIMEOUT);

        actionOverflow.click();
        device.waitForIdle();

        UiObject2 menu
                = device.wait(Until.findObject(By.text(&amp;quot;Settings&amp;quot;)), UI_TIMEOUT);

        Assert.assertThat(menu.getText(), CoreMatchers.is(&amp;quot;Settings&amp;quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考 URL&lt;br /&gt;
&lt;a href=&#34;https://developer.android.com/intl/ja/tools/testing-support-library/index.html#UIAutomator&#34;&gt;https://developer.android.com/intl/ja/tools/testing-support-library/index.html#UIAutomator&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://plus.google.com/+AndroidDevelopers/posts/WCWANrPkRxg&#34;&gt;https://plus.google.com/+AndroidDevelopers/posts/WCWANrPkRxg&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>オリジナルの URL スキームを設定したアプリをコンソールから Intent を投げて起動する</title>
      <link>http://leckyyyyyyy.github.io/post/2015/android-console-send-intent/</link>
      <pubDate>Sun, 28 Jun 2015 17:02:12 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/android-console-send-intent/</guid>
      <description>&lt;p&gt;オリジナルの URL スキームを設定したアプリを起動するとき、ブラウザのリンクを開く方法がありますが、その場合 HTML を用意してブラウザからアクセスする必要があります。&lt;br /&gt;
起動を確認するのが目的の場合、コンソールから Intent を送信することでアプリの起動を確認することができます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コンソールから Intent を送信する手順&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;コンソールを起動&lt;/li&gt;
&lt;li&gt;コンソールで &lt;code&gt;adb shell&lt;/code&gt; を実行して端末に接続&lt;/li&gt;
&lt;li&gt;コンソールで &lt;code&gt;am start -a android.intent.action.VIEW -d &amp;quot;test://example.com&amp;quot;&lt;/code&gt; を実行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;URL スキームに対応するアプリが起動するようになります。&lt;br /&gt;
&lt;code&gt;-d&lt;/code&gt; の後ろの文字列を &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; で囲っているのは URL に &amp;amp; が含まれている場合 &amp;amp; 以降の文字列が認識されないため、渡せるように囲っています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AndroidManifest.xml の設定例&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    package=&amp;quot;package&amp;quot; &amp;gt;

    &amp;lt;application
        android:allowBackup=&amp;quot;true&amp;quot;
        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:label=&amp;quot;@string/app_name&amp;quot;
        android:theme=&amp;quot;@style/AppTheme&amp;quot; &amp;gt;
        &amp;lt;activity
            android:name=&amp;quot;.MainActivity&amp;quot;
            android:label=&amp;quot;@string/app_name&amp;quot; &amp;gt;
            &amp;lt;intent-filter&amp;gt;
                &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;

                &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
            &amp;lt;intent-filter&amp;gt;
                &amp;lt;action android:name=&amp;quot;android.intent.action.VIEW&amp;quot; /&amp;gt;

                &amp;lt;category android:name=&amp;quot;android.intent.category.DEFAULT&amp;quot; /&amp;gt;
                &amp;lt;category android:name=&amp;quot;android.intent.category.BROWSABLE&amp;quot; /&amp;gt;
                &amp;lt;data android:scheme=&amp;quot;test&amp;quot; /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
        &amp;lt;/activity&amp;gt;
    &amp;lt;/application&amp;gt;

&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android の Espresso.onData で java.lang.IndexOutOfBoundsException が発生したときは</title>
      <link>http://leckyyyyyyy.github.io/post/2015/android-espresso-ondata-indexoutofboundsexception/</link>
      <pubDate>Wed, 24 Jun 2015 00:30:12 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/android-espresso-ondata-indexoutofboundsexception/</guid>
      <description>&lt;p&gt;Android の UI テストフレームワーク Espresso を利用しているときに Espresso.onData で &lt;code&gt;java.lang.IndexOutOfBoundsException&lt;/code&gt; が発生したときは参照している Adapter の &lt;code&gt;getCount&lt;/code&gt;、&lt;code&gt;getItem&lt;/code&gt; の実装を確認してみましょう。&lt;/p&gt;

&lt;p&gt;Espresso.onData で参照する Adapter の &lt;a href=&#34;https://code.google.com/p/android-test-kit/source/browse/espresso/lib/src/main/java/com/google/android/apps/common/testing/ui/espresso/action/AdapterViewProtocols.java#49&#34;&gt;データを取得している箇所&lt;/a&gt; で &lt;code&gt;getCount&lt;/code&gt; を呼び出しているのですが、例外が発生したコードでは getCount の返す値がデータのリストの長さを返していませんでした。&lt;br /&gt;
getItem はデータのリストを参照していたので、つじつまが合わず例外が発生していました。&lt;/p&gt;

&lt;p&gt;getCount、getItem は Adapter が保持するデータのリストを参照するはずなのですが、今回は全く異なる処理が組み込まれていたのでハマりました。&lt;br /&gt;
メソッドをオーバーライドするときは、メソッドの本来の役割を理解した上で実装しないと痛い目にあいますね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Product Flavor で利用できない名前</title>
      <link>http://leckyyyyyyy.github.io/post/2015/android-product-flavor-unavailable-name/</link>
      <pubDate>Sat, 30 May 2015 16:19:48 +0900</pubDate>
      
      <guid>http://leckyyyyyyy.github.io/post/2015/android-product-flavor-unavailable-name/</guid>
      <description>&lt;p&gt;Product Flavor の名前に BuildType で定義している名前は利用できない。&lt;br /&gt;
&lt;code&gt;ProductFlavor names cannot collide with BuildType names&lt;/code&gt; のエラーが出る。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;release&lt;/code&gt; はデフォルトで定義されているので気付いたけど、&lt;br /&gt;
&lt;code&gt;debug&lt;/code&gt; を定義してみると同じエラーが出たので、予約されているようです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>